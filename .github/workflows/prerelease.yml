# Monorepo prerelease (delta-aware)
# - Packs only packages whose roots changed since the previous push (see Build/packages.manifest.json).
# - Includes global triggers (Build/*, Directory.Build.* etc.) to rebuild all packages when shared build inputs change.
# - FIX: checkout uses fetch-depth: 0 (full history) so git diffs are reliable.
# - Version: <BASE>-preview.<GITHUB_RUN_NUMBER>+sha.<shortSHA>
# - Creates a GitHub prerelease with the generated nupkgs/snupkgs attached.
name: prerelease

on:
  push:
    branches:
      - main
      - 'release/*'
      - 'lts/*'

permissions:
  contents: write

concurrency:
  group: prerelease-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  build-pack-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history for reliable diffs)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET (include preview)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
          include-prerelease: true

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Detect affected packages (delta since previous push)
        id: affected
        shell: bash
        run: |
          set -euo pipefail
          # Determine base commit for this push
          BASE="${{ github.event.before }}"
          if [[ -z "$BASE" || "$BASE" == "0000000000000000000000000000000000000000" ]]; then
            # Fallback for first/force push: use initial commit
            BASE="$(git rev-list --max-parents=0 HEAD | tail -n1)"
          fi
          CHANGED="$(git diff --name-only "$BASE" "${GITHUB_SHA}")"
          echo "Changed files:"; echo "$CHANGED"

          # Load manifest paths
          MAP_PATHS="$(jq -r '.packages[].path' Build/packages.manifest.json)"
          echo "Manifest paths:"; echo "$MAP_PATHS"

          # Global triggers: rebuild ALL packages when shared build inputs change
          if echo "$CHANGED" | grep -E '^(Build/|Directory\.Build\.(props|targets)$|Directory\.Packages\.props$|NuGet\.config$|global\.json$)' >/dev/null; then
            PATHS_CSV="$(echo "$MAP_PATHS" | paste -sd, -)"
            echo "any=true" >> "$GITHUB_OUTPUT"
            echo "paths=$PATHS_CSV" >> "$GITHUB_OUTPUT"
            echo "Global trigger detected; rebuilding all package roots: $PATHS_CSV"
            exit 0
          fi

          # Per-package detection
          AFFECTED=()
          while IFS= read -r p; do
            [[ -z "$p" ]] && continue
            if echo "$CHANGED" | grep -E "^${p}(/|$)" >/dev/null; then
              AFFECTED+=("$p")
            fi
          done <<< "$MAP_PATHS"

          if [[ ${#AFFECTED[@]} -eq 0 ]]; then
            echo "any=false" >> "$GITHUB_OUTPUT"
            echo "paths=" >> "$GITHUB_OUTPUT"
            echo "No package paths affected; skipping prerelease."
          else
            PATHS_CSV=$(IFS=, echo "${AFFECTED[*]}")
            echo "any=true" >> "$GITHUB_OUTPUT"
            echo "paths=$PATHS_CSV" >> "$GITHUB_OUTPUT"
            echo "Affected package roots: $PATHS_CSV"
          fi

      - name: Compute prerelease version
        id: ver
        if: steps.affected.outputs.any == 'true'
        shell: bash
        run: |
          BASE=$(tr -d '\r\n' < Build/VERSION)
          SHA=$(git rev-parse --short=7 HEAD)
          echo "version=${BASE}-preview.${GITHUB_RUN_NUMBER}+sha.${SHA}" >> "$GITHUB_OUTPUT"

      - name: Pack (delta only)
        if: steps.affected.outputs.any == 'true'
        shell: bash
        run: |
          chmod +x Build/pack.sh
          ./Build/pack.sh --no-prerelease --release-version "${{ steps.ver.outputs.version }}" --paths "${{ steps.affected.outputs.paths }}"

      - name: Upload artifacts
        if: steps.affected.outputs.any == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: artifacts/nupkg/*
          if-no-files-found: error
          retention-days: 7

      - name: Create GitHub prerelease
        if: steps.affected.outputs.any == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.ver.outputs.version }}
          name: v${{ steps.ver.outputs.version }}
          prerelease: true
          generate_release_notes: true
          files: |
            artifacts/nupkg/*.nupkg
            artifacts/nupkg/*.snupkg
