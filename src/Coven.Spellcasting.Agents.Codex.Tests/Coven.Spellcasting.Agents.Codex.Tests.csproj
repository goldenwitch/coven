<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net10.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <IsPackable>false</IsPackable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" />
    <PackageReference Include="Microsoft.Extensions.Hosting" />
    <PackageReference Include="xunit" />
    <PackageReference Include="xunit.runner.visualstudio">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="coverlet.collector">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <Using Include="Xunit" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Coven.Spellcasting.Agents.Codex\Coven.Spellcasting.Agents.Codex.csproj" />
    <ProjectReference Include="..\Coven.Spellcasting.Agents\Coven.Spellcasting.Agents.csproj" />
    <ProjectReference Include="..\Coven.Chat\Coven.Chat.csproj" />
    <ProjectReference Include="..\Coven.Sophia\Coven.Sophia.csproj" />
    <ProjectReference Include="..\Coven.Durables\Coven.Durables.csproj" />
    <!-- Build MockProcess but don't reference its assembly directly -->
    <ProjectReference Include="..\..\Toys\Coven.Toys.MockProcess\Coven.Toys.MockProcess.csproj" ReferenceOutputAssembly="false" />
  </ItemGroup>

  <!-- After building tests, copy the MockProcess outputs next to test binaries under mock-process/ -->
  <Target Name="CopyMockProcess" AfterTargets="Build">
    <MSBuild Projects="..\..\Toys\Coven.Toys.MockProcess\Coven.Toys.MockProcess.csproj"
             Targets="GetTargetPath"
             Properties="Configuration=$(Configuration)">
      <Output TaskParameter="TargetOutputs" ItemName="MockTarget" />
    </MSBuild>

    <PropertyGroup>
      <MockDir>$([System.IO.Path]::GetDirectoryName('%(MockTarget.Identity)'))\</MockDir>
    </PropertyGroup>

    <MakeDir Directories="$(OutDir)mock-process" />

    <ItemGroup>
      <!-- Copy all outputs from MockProcess folder so dependencies are available -->
      <MockFiles Include="$(MockDir)*" />
    </ItemGroup>

    <Copy SourceFiles="@(MockFiles)"
          DestinationFolder="$(OutDir)mock-process"
          SkipUnchangedFiles="false"
          OverwriteReadOnlyFiles="true" />
  </Target>

</Project>
